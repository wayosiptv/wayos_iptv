package com.wayos_iptv.lzw.functions.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zxch.com.androdivoidetest.sql.LiveNameChange;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_NAME_CHANGE".
*/
public class LiveNameChangeDao extends AbstractDao<LiveNameChange, Void> {

    public static final String TABLENAME = "LIVE_NAME_CHANGE";

    /**
     * Properties of entity LiveNameChange.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LiveNameChange = new Property(0, String.class, "liveNameChange", false, "LIVE_NAME_CHANGE");
        public final static Property LiveNameNow = new Property(1, String.class, "liveNameNow", false, "LIVE_NAME_NOW");
    }


    public LiveNameChangeDao(DaoConfig config) {
        super(config);
    }
    
    public LiveNameChangeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_NAME_CHANGE\" (" + //
                "\"LIVE_NAME_CHANGE\" TEXT," + // 0: liveNameChange
                "\"LIVE_NAME_NOW\" TEXT);"); // 1: liveNameNow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_NAME_CHANGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveNameChange entity) {
        stmt.clearBindings();
 
        String liveNameChange = entity.getLiveNameChange();
        if (liveNameChange != null) {
            stmt.bindString(1, liveNameChange);
        }
 
        String liveNameNow = entity.getLiveNameNow();
        if (liveNameNow != null) {
            stmt.bindString(2, liveNameNow);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveNameChange entity) {
        stmt.clearBindings();
 
        String liveNameChange = entity.getLiveNameChange();
        if (liveNameChange != null) {
            stmt.bindString(1, liveNameChange);
        }
 
        String liveNameNow = entity.getLiveNameNow();
        if (liveNameNow != null) {
            stmt.bindString(2, liveNameNow);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LiveNameChange readEntity(Cursor cursor, int offset) {
        LiveNameChange entity = new LiveNameChange( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // liveNameChange
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // liveNameNow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveNameChange entity, int offset) {
        entity.setLiveNameChange(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLiveNameNow(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LiveNameChange entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LiveNameChange entity) {
        return null;
    }

    @Override
    public boolean hasKey(LiveNameChange entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
