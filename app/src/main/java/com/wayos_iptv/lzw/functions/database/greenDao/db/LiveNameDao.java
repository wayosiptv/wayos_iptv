package com.wayos_iptv.lzw.functions.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zxch.com.androdivoidetest.sql.LiveName;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_NAME".
*/
public class LiveNameDao extends AbstractDao<LiveName, Void> {

    public static final String TABLENAME = "LIVE_NAME";

    /**
     * Properties of entity LiveName.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LiveNum = new Property(0, String.class, "liveNum", false, "LIVE_NUM");
        public final static Property LiveId = new Property(1, String.class, "liveId", false, "LIVE_ID");
        public final static Property LiveName = new Property(2, String.class, "liveName", false, "LIVE_NAME");
        public final static Property LiveLink = new Property(3, String.class, "liveLink", false, "LIVE_LINK");
    }


    public LiveNameDao(DaoConfig config) {
        super(config);
    }
    
    public LiveNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_NAME\" (" + //
                "\"LIVE_NUM\" TEXT," + // 0: liveNum
                "\"LIVE_ID\" TEXT," + // 1: liveId
                "\"LIVE_NAME\" TEXT," + // 2: liveName
                "\"LIVE_LINK\" TEXT);"); // 3: liveLink
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_NAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveName entity) {
        stmt.clearBindings();
 
        String liveNum = entity.getLiveNum();
        if (liveNum != null) {
            stmt.bindString(1, liveNum);
        }
 
        String liveId = entity.getLiveId();
        if (liveId != null) {
            stmt.bindString(2, liveId);
        }
 
        String liveName = entity.getLiveName();
        if (liveName != null) {
            stmt.bindString(3, liveName);
        }
 
        String liveLink = entity.getLiveLink();
        if (liveLink != null) {
            stmt.bindString(4, liveLink);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveName entity) {
        stmt.clearBindings();
 
        String liveNum = entity.getLiveNum();
        if (liveNum != null) {
            stmt.bindString(1, liveNum);
        }
 
        String liveId = entity.getLiveId();
        if (liveId != null) {
            stmt.bindString(2, liveId);
        }
 
        String liveName = entity.getLiveName();
        if (liveName != null) {
            stmt.bindString(3, liveName);
        }
 
        String liveLink = entity.getLiveLink();
        if (liveLink != null) {
            stmt.bindString(4, liveLink);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LiveName readEntity(Cursor cursor, int offset) {
        LiveName entity = new LiveName( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // liveNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // liveId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // liveName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // liveLink
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveName entity, int offset) {
        entity.setLiveNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLiveId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLiveName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLiveLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LiveName entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LiveName entity) {
        return null;
    }

    @Override
    public boolean hasKey(LiveName entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
